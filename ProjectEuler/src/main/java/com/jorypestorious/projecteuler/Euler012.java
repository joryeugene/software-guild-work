package com.jorypestorious.projecteuler;

import java.util.ArrayList;
import java.util.List;

public class Euler012 {
//The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//Let us list the factors of the first seven triangle numbers:
//
// 1: 1
// 3: 1,3
// 6: 1,2,3,6
//10: 1,2,5,10
//15: 1,3,5,15
//21: 1,3,7,21
//28: 1,2,4,7,14,28
//We can see that 28 is the first triangle number to have over five divisors.
//
//What is the value of the first triangle number to have over five hundred divisors?
    
    static List<Long> primes = new ArrayList<>();
    
    // very slow - more than 6mins
    
    public static void main(String[] args) throws InterruptedException {
        
        initializePrimesArray(60000000L);
        
        int numOfDivisors = 0;
        
        long currentTriNum = 3;
        
        for (int i = 3; i < 6000000; i++) {
            currentTriNum+=i;
            numOfDivisors = calcNumOfDivisors(currentTriNum);
            
            System.out.println(currentTriNum + "\t" + numOfDivisors);
            if (numOfDivisors >= 500) {
                System.out.println("-----");
                System.out.println(currentTriNum); // 76576500 
                System.exit(0);
            } else {
                numOfDivisors = 0;
            }
        }
        
    }
    
    static boolean isPrime(long n) {
        if (n%2==0) return false;
        
        for(long i=3;i*i<=n;i+=2) {
            if(n%i==0) return false;
        }
        
        return true;
    }
    
    static void initializePrimesArray(long ceiling) {
        System.out.println("Starting primes array initialization");
        primes.add(1L);
        primes.add(2L);

        for (long i = 3; i < ceiling; i++) {
            if (isPrime(i)) {
                primes.add(i);
            }
        }
        long lastPrime = primes.get(primes.size()-1);
    }
    
    static int calcNumOfDivisors(long n) {
        int numOfDivisors = 1;
        int temp = 0;
        
        for (int i = 1; primes.get(i) < n/2 + 1; i++) {
            if (n % primes.get(i) == 0) {
                temp+=2; 
                for (int j = 2; Math.pow(primes.get(i), j) < n/2 + 1; j++) {
                    if (n % Math.pow(primes.get(i), j) == 0) temp++;
                }
                numOfDivisors *= temp;
            }
            temp = 0;
            
        }
        
        return numOfDivisors;
    }
            
}
